{"ast":null,"code":"var _jsxFileName = \"/home/utu/git/utuweb/ex_2_10/src/addReminders.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass AddReminders extends React.Component {\n  constructor(props) {\n    /* voiko constructorin jättää pois, kokeile */\n    super(props);\n\n    this.addReminder = event => {\n      /* prevent normal submit rendering and get from network */\n      event.preventDefault();\n      /* prevent duplicates */\n\n      var pos = this.props.reminders.findIndex(o => o.name === this.state.newReminder);\n\n      if (pos == -1) {\n        /* construct new object */\n        var maxid = 0;\n        this.props.reminders.map(o => {\n          if (o.id > maxid) maxid = o.id;\n        });\n        maxid = maxid + 1;\n        const reminderObject = {\n          name: this.state.newReminder,\n          timestamp: this.state.newTime,\n          id: maxid\n        };\n        /* concatenate new list and set to App state */\n\n        const reminders = this.props.reminders.concat(reminderObject);\n        this.props.setReminder(reminders);\n        /* write to json file */\n\n        axios.post('http://localhost:3001/api/reminders', reminderObject).then(response => {\n          console.log('post promise fulfilled for id: ', maxid);\n        });\n        /* clear input field */\n\n        this.state.newReminder = '';\n      } else {\n        alert('A duplicate reminder exists already!');\n      }\n    };\n\n    this.handleReminderChange = event => {\n      this.setState({\n        newReminder: event.target.value\n      });\n    };\n\n    this.handleTimeChange = event => {\n      this.setState({\n        newTime: event.target.value\n      });\n    };\n\n    this.state = {\n      newReminder: '',\n      newTime: new Date().toLocaleString()\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.addReminder,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Aihe: \", /*#__PURE__*/_jsxDEV(\"input\", {\n            value: this.state.newReminder,\n            onChange: this.handleReminderChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Aika: \", /*#__PURE__*/_jsxDEV(\"input\", {\n            value: this.state.newTime,\n            onChange: this.handleTimeChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Lis\\xE4\\xE4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default AddReminders;\n/*      date: ,*/","map":{"version":3,"sources":["/home/utu/git/utuweb/ex_2_10/src/addReminders.js"],"names":["React","axios","AddReminders","Component","constructor","props","addReminder","event","preventDefault","pos","reminders","findIndex","o","name","state","newReminder","maxid","map","id","reminderObject","timestamp","newTime","concat","setReminder","post","then","response","console","log","alert","handleReminderChange","setState","target","value","handleTimeChange","Date","toLocaleString","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport axios from 'axios';\n\nclass AddReminders extends React.Component {\n    constructor(props) {  /* voiko constructorin jättää pois, kokeile */\n      super(props);\n      this.state = {\n        newReminder: '',\n        newTime: new Date().toLocaleString()\n      }\n    }\n\n  addReminder = (event) => {\n  \n    /* prevent normal submit rendering and get from network */\n    event.preventDefault()\n\n    /* prevent duplicates */\n    var pos = this.props.reminders.findIndex(o => o.name === this.state.newReminder)\n    if (pos == -1) {\n\n      /* construct new object */\n      var maxid = 0\n      this.props.reminders.map(o => {if (o.id > maxid) maxid = o.id})\n      maxid = maxid + 1\n      const reminderObject = {\n        name: this.state.newReminder,\n        timestamp: this.state.newTime,\n        id: maxid\n      }\n    \n      /* concatenate new list and set to App state */\n      const reminders = this.props.reminders.concat(reminderObject)\n      this.props.setReminder(reminders)\n\n      /* write to json file */\n      axios\n        .post('http://localhost:3001/api/reminders', reminderObject)\n        .then(response => {\n          console.log('post promise fulfilled for id: ', maxid)\n        })\n\n        /* clear input field */\n      this.state.newReminder = ''\n\n    } else {\n      alert('A duplicate reminder exists already!')\n    }\n  }\n\n  handleReminderChange = (event) => {\n    this.setState({ newReminder: event.target.value })\n  }\n\n  handleTimeChange = (event) => {\n    this.setState({ newTime: event.target.value })\n  }\n  \n  render () {\n\n    return (\n      <div>\n        <form onSubmit={this.addReminder}>\n            <div>\n              Aihe: <input\n                value={this.state.newReminder}\n                onChange={this.handleReminderChange}\n              />\n            </div>\n            <div>\n              Aika: <input\n                value={this.state.newTime}\n                onChange={this.handleTimeChange}\n              />\n            </div>\n            <div>\n              <button type=\"submit\">Lisää</button>\n            </div>\n        </form>\n      </div>\n    )\n  }\n}\n\nexport default AddReminders\n\n/*      date: ,*/\n"]},"metadata":{},"sourceType":"module"}