{"ast":null,"code":"var _jsxFileName = \"/home/utu/git/utuweb/ex_2_10/src/addReminders.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass AddReminders extends React.Component {\n  constructor(props) {\n    /* voiko constructorin jättää pois, kokeile */\n    super(props);\n\n    this.addReminder = event => {\n      /* prevent normal submit rendering and get from network */\n      event.preventDefault();\n      /* prevent duplicates */\n\n      var pos = this.props.reminders.findIndex(o => o.name === this.state.newReminder);\n\n      if (pos == -1) {\n        /* construct new object */\n        var maxid = 0;\n        this.props.reminders.map(o => {\n          if (o.id > maxid) maxid = o.id;\n        });\n        console.log('maxid: ', maxid);\n        const reminderObject = {\n          name: this.state.newReminder,\n          timestamp: this.state.newTime,\n          id: this.props.reminders.length + 1\n        };\n        console.log('new object: ', reminderObject);\n        /* concatenate new list and set to App state */\n\n        const reminders = this.props.reminders.concat(reminderObject);\n        console.log('concatenated: ', reminders);\n        this.props.setReminder(reminders);\n        /* write to json file */\n\n        console.log('writing...');\n        axios.post('http://localhost:3001/reminders', reminderObject).then(response => {\n          console.log('post promise fulfilled');\n        });\n        /* clear input field */\n\n        this.state.newReminder = '';\n      } else {\n        alert('A duplicate reminder exists already!');\n      }\n    };\n\n    this.handleReminderChange = event => {\n      this.setState({\n        newReminder: event.target.value\n      });\n    };\n\n    this.handleTimeChange = event => {\n      this.setState({\n        newTime: event.target.value\n      });\n    };\n\n    this.state = {\n      newReminder: '',\n      newTime: new Date().toLocaleString()\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: this.addReminder,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Aihe: \", /*#__PURE__*/_jsxDEV(\"input\", {\n            value: this.state.newReminder,\n            onChange: this.handleReminderChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Aika: \", /*#__PURE__*/_jsxDEV(\"input\", {\n            value: this.state.newTime,\n            onChange: this.handleTimeChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Lis\\xE4\\xE4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default AddReminders;\n/*      date: ,*/","map":{"version":3,"sources":["/home/utu/git/utuweb/ex_2_10/src/addReminders.js"],"names":["React","axios","AddReminders","Component","constructor","props","addReminder","event","preventDefault","pos","reminders","findIndex","o","name","state","newReminder","maxid","map","id","console","log","reminderObject","timestamp","newTime","length","concat","setReminder","post","then","response","alert","handleReminderChange","setState","target","value","handleTimeChange","Date","toLocaleString","render"],"mappings":"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","sourcesContent":["import React from 'react';\nimport axios from 'axios';\n\nclass AddReminders extends React.Component {\n    constructor(props) {  /* voiko constructorin jättää pois, kokeile */\n      super(props);\n      this.state = {\n        newReminder: '',\n        newTime: new Date().toLocaleString()\n      }\n    }\n\n  addReminder = (event) => {\n  \n    /* prevent normal submit rendering and get from network */\n    event.preventDefault()\n\n    /* prevent duplicates */\n    var pos = this.props.reminders.findIndex(o => o.name === this.state.newReminder)\n    if (pos == -1) {\n\n      /* construct new object */\n      var maxid = 0;\n      this.props.reminders.map(o => {if (o.id > maxid) maxid = o.id})\n      console.log('maxid: ',maxid)\n      const reminderObject = {\n        name: this.state.newReminder,\n        timestamp: this.state.newTime,\n        id: this.props.reminders.length + 1\n      }\n      console.log('new object: ',reminderObject)\n    \n      /* concatenate new list and set to App state */\n      const reminders = this.props.reminders.concat(reminderObject)\n      console.log('concatenated: ', reminders)\n      this.props.setReminder(reminders)\n\n      /* write to json file */\n      console.log('writing...')\n      axios\n        .post('http://localhost:3001/reminders', reminderObject)\n        .then(response => {\n          console.log('post promise fulfilled')\n        })\n\n        /* clear input field */\n      this.state.newReminder = ''\n\n    } else {\n      alert('A duplicate reminder exists already!')\n    }\n  }\n\n  handleReminderChange = (event) => {\n    this.setState({ newReminder: event.target.value })\n  }\n\n  handleTimeChange = (event) => {\n    this.setState({ newTime: event.target.value })\n  }\n  \n  render () {\n\n    return (\n      <div>\n        <form onSubmit={this.addReminder}>\n            <div>\n              Aihe: <input\n                value={this.state.newReminder}\n                onChange={this.handleReminderChange}\n              />\n            </div>\n            <div>\n              Aika: <input\n                value={this.state.newTime}\n                onChange={this.handleTimeChange}\n              />\n            </div>\n            <div>\n              <button type=\"submit\">Lisää</button>\n            </div>\n        </form>\n      </div>\n    )\n  }\n}\n\nexport default AddReminders\n\n/*      date: ,*/\n"]},"metadata":{},"sourceType":"module"}